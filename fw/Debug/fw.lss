
fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  0000028c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f25  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000910  00000000  00000000  000013b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c5a  00000000  00000000  00001cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  00002924  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006264  00000000  00000000  00002b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000765  00000000  00000000  00008d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  000094ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002341  00000000  00000000  000095dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	00 00       	nop
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	00 00       	nop
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	00 00       	nop
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	00 00       	nop
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	00 00       	nop
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	00 00       	nop
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	00 00       	nop
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
  26:	00 00       	nop
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
  2e:	00 00       	nop
  30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
  32:	00 00       	nop
  34:	22 c0       	rjmp	.+68     	; 0x7a <__bad_interrupt>
  36:	00 00       	nop
  38:	20 c0       	rjmp	.+64     	; 0x7a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1e c0       	rjmp	.+60     	; 0x7a <__bad_interrupt>
  3e:	00 00       	nop
  40:	1c c0       	rjmp	.+56     	; 0x7a <__bad_interrupt>
  42:	00 00       	nop
  44:	1a c0       	rjmp	.+52     	; 0x7a <__bad_interrupt>
  46:	00 00       	nop
  48:	18 c0       	rjmp	.+48     	; 0x7a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	16 c0       	rjmp	.+44     	; 0x7a <__bad_interrupt>
  4e:	00 00       	nop
  50:	14 c0       	rjmp	.+40     	; 0x7a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	e8 d0       	rcall	.+464    	; 0x248 <main>
  78:	07 c1       	rjmp	.+526    	; 0x288 <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <Buzzer_Init>:
#include <avr/io.h>
#include <util/delay.h>
#include "buzzer.h"

void Buzzer_Init(void) {
	DDRB |= (1 << BUZZER_PIN); // Set BUZZER_PIN as output
  7c:	b8 9a       	sbi	0x17, 0	; 23
	PORTB &= ~(1 << BUZZER_PIN); // Ensure the buzzer is off initially
  7e:	c0 98       	cbi	0x18, 0	; 24
  80:	08 95       	ret

00000082 <EEPROM_Write>:
#include <avr/io.h>
#include "eeprom.h"


void EEPROM_Write(unsigned int address, unsigned char data) {
	while (EECR & (1 << EEWE)); // Wait for completion of previous write
  82:	e1 99       	sbic	0x1c, 1	; 28
  84:	fe cf       	rjmp	.-4      	; 0x82 <EEPROM_Write>
	EEAR = address;            // Set address
  86:	9f bb       	out	0x1f, r25	; 31
  88:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;               // Set data
  8a:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1 << EEMWE);      // Master Write Enable
  8c:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1 << EEWE);       // Start EEPROM write
  8e:	e1 9a       	sbi	0x1c, 1	; 28
  90:	08 95       	ret

00000092 <EEPROM_Read>:
}

unsigned char EEPROM_Read(unsigned int address) {
	while (EECR & (1 << EEWE)); // Wait for completion of previous write
  92:	e1 99       	sbic	0x1c, 1	; 28
  94:	fe cf       	rjmp	.-4      	; 0x92 <EEPROM_Read>
	EEAR = address;            // Set address
  96:	9f bb       	out	0x1f, r25	; 31
  98:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1 << EERE);       // Start EEPROM read
  9a:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;               // Return data
  9c:	8d b3       	in	r24, 0x1d	; 29
}
  9e:	08 95       	ret

000000a0 <EEPROM_Clear>:

void EEPROM_Clear(void) {
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
	for (unsigned int i = 0; i < EEPROM_SIZE; i++) {
  a4:	c0 e0       	ldi	r28, 0x00	; 0
  a6:	d0 e0       	ldi	r29, 0x00	; 0
		EEPROM_Write(i, 0xFF); // 0xFF is the default erased value
  a8:	6f ef       	ldi	r22, 0xFF	; 255
  aa:	ce 01       	movw	r24, r28
  ac:	ea df       	rcall	.-44     	; 0x82 <EEPROM_Write>
	EECR |= (1 << EERE);       // Start EEPROM read
	return EEDR;               // Return data
}

void EEPROM_Clear(void) {
	for (unsigned int i = 0; i < EEPROM_SIZE; i++) {
  ae:	21 96       	adiw	r28, 0x01	; 1
  b0:	c1 15       	cp	r28, r1
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	d8 07       	cpc	r29, r24
  b6:	c1 f7       	brne	.-16     	; 0xa8 <EEPROM_Clear+0x8>
		EEPROM_Write(i, 0xFF); // 0xFF is the default erased value
	}
}
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <EEPROM_WriteString>:

void EEPROM_WriteString(unsigned int startAddress, const char* str) {
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	fb 01       	movw	r30, r22
	unsigned int i = 0;
	while (str[i] != '\0' && startAddress + i < EEPROM_SIZE) {
  c8:	60 81       	ld	r22, Z
  ca:	66 23       	and	r22, r22
  cc:	a1 f0       	breq	.+40     	; 0xf6 <EEPROM_WriteString+0x38>
  ce:	81 15       	cp	r24, r1
  d0:	24 e0       	ldi	r18, 0x04	; 4
  d2:	92 07       	cpc	r25, r18
  d4:	80 f4       	brcc	.+32     	; 0xf6 <EEPROM_WriteString+0x38>
  d6:	8f 01       	movw	r16, r30
  d8:	0f 5f       	subi	r16, 0xFF	; 255
  da:	1f 4f       	sbci	r17, 0xFF	; 255
  dc:	ec 01       	movw	r28, r24
		EEPROM_Write(startAddress + i, str[i]);
  de:	ce 01       	movw	r24, r28
  e0:	d0 df       	rcall	.-96     	; 0x82 <EEPROM_Write>
	}
}

void EEPROM_WriteString(unsigned int startAddress, const char* str) {
	unsigned int i = 0;
	while (str[i] != '\0' && startAddress + i < EEPROM_SIZE) {
  e2:	f8 01       	movw	r30, r16
  e4:	61 91       	ld	r22, Z+
  e6:	8f 01       	movw	r16, r30
  e8:	66 23       	and	r22, r22
  ea:	29 f0       	breq	.+10     	; 0xf6 <EEPROM_WriteString+0x38>
  ec:	21 96       	adiw	r28, 0x01	; 1
  ee:	c1 15       	cp	r28, r1
  f0:	f4 e0       	ldi	r31, 0x04	; 4
  f2:	df 07       	cpc	r29, r31
  f4:	a1 f7       	brne	.-24     	; 0xde <EEPROM_WriteString+0x20>
		EEPROM_Write(startAddress + i, str[i]);
		i++;
	}
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	08 95       	ret

00000100 <EEPROM_ReadString>:

void EEPROM_ReadString(unsigned int startAddress, char* buffer, unsigned int length) {
 100:	af 92       	push	r10
 102:	bf 92       	push	r11
 104:	cf 92       	push	r12
 106:	df 92       	push	r13
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	6b 01       	movw	r12, r22
 116:	7a 01       	movw	r14, r20
	for (unsigned int i = 0; i < length && (startAddress + i) < EEPROM_SIZE; i++) {
 118:	41 15       	cp	r20, r1
 11a:	51 05       	cpc	r21, r1
 11c:	b1 f0       	breq	.+44     	; 0x14a <EEPROM_ReadString+0x4a>
 11e:	81 15       	cp	r24, r1
 120:	24 e0       	ldi	r18, 0x04	; 4
 122:	92 07       	cpc	r25, r18
 124:	90 f4       	brcc	.+36     	; 0x14a <EEPROM_ReadString+0x4a>
 126:	5b 01       	movw	r10, r22
 128:	8b 01       	movw	r16, r22
 12a:	04 0f       	add	r16, r20
 12c:	15 1f       	adc	r17, r21
 12e:	ec 01       	movw	r28, r24
		buffer[i] = EEPROM_Read(startAddress + i);
 130:	ce 01       	movw	r24, r28
 132:	af df       	rcall	.-162    	; 0x92 <EEPROM_Read>
 134:	f5 01       	movw	r30, r10
 136:	81 93       	st	Z+, r24
 138:	5f 01       	movw	r10, r30
		i++;
	}
}

void EEPROM_ReadString(unsigned int startAddress, char* buffer, unsigned int length) {
	for (unsigned int i = 0; i < length && (startAddress + i) < EEPROM_SIZE; i++) {
 13a:	e0 17       	cp	r30, r16
 13c:	f1 07       	cpc	r31, r17
 13e:	29 f0       	breq	.+10     	; 0x14a <EEPROM_ReadString+0x4a>
 140:	21 96       	adiw	r28, 0x01	; 1
 142:	c1 15       	cp	r28, r1
 144:	f4 e0       	ldi	r31, 0x04	; 4
 146:	df 07       	cpc	r29, r31
 148:	99 f7       	brne	.-26     	; 0x130 <EEPROM_ReadString+0x30>
		buffer[i] = EEPROM_Read(startAddress + i);
	}
	buffer[length] = '\0'; 
 14a:	f6 01       	movw	r30, r12
 14c:	ee 0d       	add	r30, r14
 14e:	ff 1d       	adc	r31, r15
 150:	10 82       	st	Z, r1
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	ff 90       	pop	r15
 15c:	ef 90       	pop	r14
 15e:	df 90       	pop	r13
 160:	cf 90       	pop	r12
 162:	bf 90       	pop	r11
 164:	af 90       	pop	r10
 166:	08 95       	ret

00000168 <EEPROM_FindNextAddress>:

unsigned int EEPROM_FindNextAddress(void) {
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
	for (unsigned int i = 0; i < EEPROM_SIZE; i++) {
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0
		if (EEPROM_Read(i) == 0xFF) { // 0xFF indicates an empty cell
 170:	ce 01       	movw	r24, r28
 172:	8f df       	rcall	.-226    	; 0x92 <EEPROM_Read>
 174:	8f 3f       	cpi	r24, 0xFF	; 255
 176:	41 f0       	breq	.+16     	; 0x188 <EEPROM_FindNextAddress+0x20>
	}
	buffer[length] = '\0'; 
}

unsigned int EEPROM_FindNextAddress(void) {
	for (unsigned int i = 0; i < EEPROM_SIZE; i++) {
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	c1 15       	cp	r28, r1
 17c:	84 e0       	ldi	r24, 0x04	; 4
 17e:	d8 07       	cpc	r29, r24
 180:	b9 f7       	brne	.-18     	; 0x170 <EEPROM_FindNextAddress+0x8>
		if (EEPROM_Read(i) == 0xFF) { // 0xFF indicates an empty cell
			return i;
		}
	}
	return EEPROM_SIZE; // EEPROM is full
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	94 e0       	ldi	r25, 0x04	; 4
 186:	02 c0       	rjmp	.+4      	; 0x18c <EEPROM_FindNextAddress+0x24>
 188:	8c 2f       	mov	r24, r28
 18a:	9d 2f       	mov	r25, r29
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <LCD_Command>:
#include <avr/io.h>
#include <util/delay.h>
#include "lcd.h"

void LCD_Command(unsigned char cmd) {
	PORTC = cmd;
 192:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1 << RS); // RS = 0 for command
 194:	a8 98       	cbi	0x15, 0	; 21
	PORTC |= (1 << EN);  // Enable pulse
 196:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	89 ef       	ldi	r24, 0xF9	; 249
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Command+0xa>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_Command+0x10>
 1a2:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1 << EN);
 1a4:	a9 98       	cbi	0x15, 1	; 21
 1a6:	83 ef       	ldi	r24, 0xF3	; 243
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_Command+0x18>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_Command+0x1e>
 1b0:	00 00       	nop
 1b2:	08 95       	ret

000001b4 <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init(void) {
	DDRC = 0xFF;
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	84 bb       	out	0x14, r24	; 20
 1b8:	87 e8       	ldi	r24, 0x87	; 135
 1ba:	93 e1       	ldi	r25, 0x13	; 19
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Init+0x8>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_Init+0xe>
 1c2:	00 00       	nop
	_delay_ms(20);
	LCD_Command(0x38); // 8-bit mode
 1c4:	88 e3       	ldi	r24, 0x38	; 56
	LCD_Command(0x0C); // Display ON, cursor OFF
 1c6:	e5 df       	rcall	.-54     	; 0x192 <LCD_Command>
	LCD_Command(0x01); // Clear display
 1c8:	8c e0       	ldi	r24, 0x0C	; 12
 1ca:	e3 df       	rcall	.-58     	; 0x192 <LCD_Command>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	e1 cf       	rjmp	.-62     	; 0x192 <LCD_Command>
 1d0:	08 95       	ret

000001d2 <LCD_Print>:
}

void LCD_Print(char *str) {
 1d2:	fc 01       	movw	r30, r24
	while (*str) {
 1d4:	90 81       	ld	r25, Z
 1d6:	99 23       	and	r25, r25
 1d8:	a1 f0       	breq	.+40     	; 0x202 <LCD_Print+0x30>
 1da:	31 96       	adiw	r30, 0x01	; 1
		PORTC = *str++;
 1dc:	95 bb       	out	0x15, r25	; 21
		PORTC |= (1 << RS); // RS = 1 for data
 1de:	a8 9a       	sbi	0x15, 0	; 21
		PORTC |= (1 << EN);
 1e0:	a9 9a       	sbi	0x15, 1	; 21
 1e2:	89 ef       	ldi	r24, 0xF9	; 249
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_Print+0x14>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_Print+0x1a>
 1ec:	00 00       	nop
		_delay_ms(1);
		PORTC &= ~(1 << EN);
 1ee:	a9 98       	cbi	0x15, 1	; 21
 1f0:	83 ef       	ldi	r24, 0xF3	; 243
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_Print+0x22>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_Print+0x28>
 1fa:	00 00       	nop
	LCD_Command(0x0C); // Display ON, cursor OFF
	LCD_Command(0x01); // Clear display
}

void LCD_Print(char *str) {
	while (*str) {
 1fc:	91 91       	ld	r25, Z+
 1fe:	91 11       	cpse	r25, r1
 200:	ed cf       	rjmp	.-38     	; 0x1dc <LCD_Print+0xa>
 202:	08 95       	ret

00000204 <LCD_Clear>:
		_delay_ms(2);
	}
}

void LCD_Clear(void) {
	LCD_Command(0x01); // Clear display
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	c5 cf       	rjmp	.-118    	; 0x192 <LCD_Command>
 208:	08 95       	ret

0000020a <LCD_SetCursor>:
}

void LCD_SetCursor(unsigned char row, unsigned char col) {
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	00 d0       	rcall	.+0      	; 0x210 <LCD_SetCursor+0x6>
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
	unsigned char pos[] = {0x80, 0xC0};
 214:	90 e8       	ldi	r25, 0x80	; 128
 216:	99 83       	std	Y+1, r25	; 0x01
 218:	90 ec       	ldi	r25, 0xC0	; 192
 21a:	9a 83       	std	Y+2, r25	; 0x02
	LCD_Command(pos[row - 1] + col);
 21c:	fe 01       	movw	r30, r28
 21e:	e8 0f       	add	r30, r24
 220:	f1 1d       	adc	r31, r1
 222:	80 81       	ld	r24, Z
 224:	86 0f       	add	r24, r22
 226:	b5 df       	rcall	.-150    	; 0x192 <LCD_Command>
}
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <Show_Menu>:

//#define F_CPU 16000000UL

void Show_Menu(void);

void Show_Menu(void) {
 232:	e8 df       	rcall	.-48     	; 0x204 <LCD_Clear>
 234:	80 e6       	ldi	r24, 0x60	; 96
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	cc df       	rcall	.-104    	; 0x1d2 <LCD_Print>
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	e5 df       	rcall	.-54     	; 0x20a <LCD_SetCursor>
 240:	8e e6       	ldi	r24, 0x6E	; 110
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	c6 cf       	rjmp	.-116    	; 0x1d2 <LCD_Print>
 246:	08 95       	ret

00000248 <main>:
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	64 97       	sbiw	r28, 0x14	; 20
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	ab df       	rcall	.-170    	; 0x1b4 <LCD_Init>
 25e:	0e df       	rcall	.-484    	; 0x7c <Buzzer_Init>
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	87 bb       	out	0x17, r24	; 23
 264:	18 ba       	out	0x18, r1	; 24
 266:	1c df       	rcall	.-456    	; 0xa0 <EEPROM_Clear>
 268:	7f df       	rcall	.-258    	; 0x168 <EEPROM_FindNextAddress>
 26a:	8c 01       	movw	r16, r24
 26c:	69 e7       	ldi	r22, 0x79	; 121
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	26 df       	rcall	.-436    	; 0xbe <EEPROM_WriteString>
 272:	42 e0       	ldi	r20, 0x02	; 2
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	be 01       	movw	r22, r28
 278:	6f 5f       	subi	r22, 0xFF	; 255
 27a:	7f 4f       	sbci	r23, 0xFF	; 255
 27c:	c8 01       	movw	r24, r16
 27e:	40 df       	rcall	.-384    	; 0x100 <EEPROM_ReadString>
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	88 bb       	out	0x18, r24	; 24
 284:	d6 df       	rcall	.-84     	; 0x232 <Show_Menu>
 286:	fe cf       	rjmp	.-4      	; 0x284 <main+0x3c>

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
