
fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00800060  000005a4  00000638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008001bc  008001bc  00000794  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001197  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009cd  00000000  00000000  00001a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c2e  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00003074  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000073a1  00000000  00000000  00003224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000629  00000000  00000000  0000a5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000abee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000062c  00000000  00000000  0000ac9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3b       	cpi	r26, 0xBC	; 188
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ac eb       	ldi	r26, 0xBC	; 188
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3c       	cpi	r26, 0xC0	; 192
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	c6 d0       	rcall	.+396    	; 0x214 <main>
  88:	8b c2       	rjmp	.+1302   	; 0x5a0 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <LCD_Command>:
}
void LCD_Number(unsigned int num) {
	char buffer[10];
	num_to_string(num,buffer);      // Convert number to string (base 10)
	LCD_String(buffer);          // Display the string
}
  8c:	85 bb       	out	0x15, r24	; 21
  8e:	90 98       	cbi	0x12, 0	; 18
  90:	91 98       	cbi	0x12, 1	; 18
  92:	92 9a       	sbi	0x12, 2	; 18
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	8a 95       	dec	r24
  98:	f1 f7       	brne	.-4      	; 0x96 <LCD_Command+0xa>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <LCD_Command+0x10>
  9c:	92 98       	cbi	0x12, 2	; 18
  9e:	8f e6       	ldi	r24, 0x6F	; 111
  a0:	97 e1       	ldi	r25, 0x17	; 23
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_Command+0x16>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_Command+0x1c>
  a8:	00 00       	nop
  aa:	08 95       	ret

000000ac <LCD_Char>:
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	90 9a       	sbi	0x12, 0	; 18
  b0:	91 98       	cbi	0x12, 1	; 18
  b2:	92 9a       	sbi	0x12, 2	; 18
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	8a 95       	dec	r24
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_Char+0xa>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_Char+0x10>
  bc:	92 98       	cbi	0x12, 2	; 18
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_Char+0x16>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_Char+0x1c>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <LCD_Init>:
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	81 bb       	out	0x11, r24	; 17
  d0:	84 bb       	out	0x14, r24	; 20
  d2:	8f e3       	ldi	r24, 0x3F	; 63
  d4:	9c e9       	ldi	r25, 0x9C	; 156
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_Init+0xa>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCD_Init+0x10>
  dc:	00 00       	nop
  de:	88 e3       	ldi	r24, 0x38	; 56
  e0:	d5 df       	rcall	.-86     	; 0x8c <LCD_Command>
  e2:	8c e0       	ldi	r24, 0x0C	; 12
  e4:	d3 df       	rcall	.-90     	; 0x8c <LCD_Command>
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	d1 df       	rcall	.-94     	; 0x8c <LCD_Command>
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	cf df       	rcall	.-98     	; 0x8c <LCD_Command>
  ee:	80 e8       	ldi	r24, 0x80	; 128
  f0:	cd cf       	rjmp	.-102    	; 0x8c <LCD_Command>
  f2:	08 95       	ret

000000f4 <LCD_String>:
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
  fa:	88 81       	ld	r24, Y
  fc:	88 23       	and	r24, r24
  fe:	29 f0       	breq	.+10     	; 0x10a <LCD_String+0x16>
 100:	21 96       	adiw	r28, 0x01	; 1
 102:	d4 df       	rcall	.-88     	; 0xac <LCD_Char>
 104:	89 91       	ld	r24, Y+
 106:	81 11       	cpse	r24, r1
 108:	fc cf       	rjmp	.-8      	; 0x102 <LCD_String+0xe>
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <LCD_String_xy>:
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ea 01       	movw	r28, r20
 116:	81 11       	cpse	r24, r1
 118:	07 c0       	rjmp	.+14     	; 0x128 <LCD_String_xy+0x18>
 11a:	60 31       	cpi	r22, 0x10	; 16
 11c:	6c f4       	brge	.+26     	; 0x138 <LCD_String_xy+0x28>
 11e:	86 2f       	mov	r24, r22
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	80 68       	ori	r24, 0x80	; 128
 124:	b3 df       	rcall	.-154    	; 0x8c <LCD_Command>
 126:	08 c0       	rjmp	.+16     	; 0x138 <LCD_String_xy+0x28>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	31 f4       	brne	.+12     	; 0x138 <LCD_String_xy+0x28>
 12c:	60 31       	cpi	r22, 0x10	; 16
 12e:	24 f4       	brge	.+8      	; 0x138 <LCD_String_xy+0x28>
 130:	86 2f       	mov	r24, r22
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	80 6c       	ori	r24, 0xC0	; 192
 136:	aa df       	rcall	.-172    	; 0x8c <LCD_Command>
 138:	ce 01       	movw	r24, r28
 13a:	dc df       	rcall	.-72     	; 0xf4 <LCD_String>
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <LCD_Clear>:


void LCD_Clear(void)
{
	LCD_Command (0x01);		/* clear display */
 142:	81 e0       	ldi	r24, 0x01	; 1
	LCD_Command (0x80);		/* cursor at home position */
 144:	a3 df       	rcall	.-186    	; 0x8c <LCD_Command>
 146:	80 e8       	ldi	r24, 0x80	; 128
 148:	a1 cf       	rjmp	.-190    	; 0x8c <LCD_Command>
 14a:	08 95       	ret

0000014c <HCSR04Init>:

void HCSR04Init()
{
	
	// we're setting the trigger pin as output as it will generate ultrasonic sound wave
	US_DDR|=(1<<US_TRIG_POS);
 14c:	d6 9a       	sbi	0x1a, 6	; 26
 14e:	08 95       	ret

00000150 <HCSR04Trigger>:

void HCSR04Trigger()
{   // this function will generate ultrasonic sound wave for 15 microseconds
	//Send a 10uS pulse on trigger line
	
	US_PORT|=(1<<US_TRIG_POS);	//high
 150:	de 9a       	sbi	0x1b, 6	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	8a 95       	dec	r24
 156:	f1 f7       	brne	.-4      	; 0x154 <HCSR04Trigger+0x4>
	
	_delay_us(15);				//wait 15uS
	
	US_PORT&=~(1<<US_TRIG_POS);	//low
 158:	de 98       	cbi	0x1b, 6	; 27
 15a:	08 95       	ret

0000015c <GetPulseWidth>:

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
	{
		if(!(US_PIN & (1<<US_ECHO_POS)))
 15c:	cf 99       	sbic	0x19, 7	; 25
 15e:	18 c0       	rjmp	.+48     	; 0x190 <GetPulseWidth+0x34>
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	a0 e0       	ldi	r26, 0x00	; 0
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	cf 99       	sbic	0x19, 7	; 25
 16a:	0d c0       	rjmp	.+26     	; 0x186 <GetPulseWidth+0x2a>
	
	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	a1 1d       	adc	r26, r1
 170:	b1 1d       	adc	r27, r1
 172:	80 3c       	cpi	r24, 0xC0	; 192
 174:	27 e2       	ldi	r18, 0x27	; 39
 176:	92 07       	cpc	r25, r18
 178:	29 e0       	ldi	r18, 0x09	; 9
 17a:	a2 07       	cpc	r26, r18
 17c:	b1 05       	cpc	r27, r1
 17e:	a1 f7       	brne	.-24     	; 0x168 <GetPulseWidth+0xc>
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
	return US_ERROR;	//Indicates time out
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	08 95       	ret
		continue;	//Line is still low, so wait
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
 186:	80 3c       	cpi	r24, 0xC0	; 192
 188:	97 42       	sbci	r25, 0x27	; 39
 18a:	a9 40       	sbci	r26, 0x09	; 9
 18c:	b1 05       	cpc	r27, r1
 18e:	c9 f1       	breq	.+114    	; 0x202 <GetPulseWidth+0xa6>
	
	//High Edge Found
	
	// Section -2 : This section is all about preparing the timer for counting the time of the pulse. Timers in microcontrllers is used for timimg operation
	//Setup Timer1
	TCCR1A=0X00;
 190:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x00;			// This line start the counter to start counting time
 196:	1d bc       	out	0x2d, r1	; 45
 198:	1c bc       	out	0x2c, r1	; 44

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
	{
		if(US_PIN & (1<<US_ECHO_POS))
 19a:	cf 9b       	sbis	0x19, 7	; 25
 19c:	22 c0       	rjmp	.+68     	; 0x1e2 <GetPulseWidth+0x86>
		{
			if(TCNT1 > 60000) break; else continue;   // if the TCNT1 value gets higher than 60000 it means there is not object in the range of the sensor
 19e:	8c b5       	in	r24, 0x2c	; 44
 1a0:	9d b5       	in	r25, 0x2d	; 45
 1a2:	81 36       	cpi	r24, 0x61	; 97
 1a4:	9a 4e       	sbci	r25, 0xEA	; 234
 1a6:	e8 f4       	brcc	.+58     	; 0x1e2 <GetPulseWidth+0x86>
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	a0 e0       	ldi	r26, 0x00	; 0
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
	TCNT1=0x00;			// This line start the counter to start counting time

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
	{
		if(US_PIN & (1<<US_ECHO_POS))
 1b0:	cf 9b       	sbis	0x19, 7	; 25
 1b2:	12 c0       	rjmp	.+36     	; 0x1d8 <GetPulseWidth+0x7c>
		{
			if(TCNT1 > 60000) break; else continue;   // if the TCNT1 value gets higher than 60000 it means there is not object in the range of the sensor
 1b4:	2c b5       	in	r18, 0x2c	; 44
 1b6:	3d b5       	in	r19, 0x2d	; 45
 1b8:	21 36       	cpi	r18, 0x61	; 97
 1ba:	3a 4e       	sbci	r19, 0xEA	; 234
 1bc:	68 f4       	brcc	.+26     	; 0x1d8 <GetPulseWidth+0x7c>
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
	TCNT1=0x00;			// This line start the counter to start counting time

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	a1 1d       	adc	r26, r1
 1c2:	b1 1d       	adc	r27, r1
 1c4:	80 3c       	cpi	r24, 0xC0	; 192
 1c6:	27 e2       	ldi	r18, 0x27	; 39
 1c8:	92 07       	cpc	r25, r18
 1ca:	29 e0       	ldi	r18, 0x09	; 9
 1cc:	a2 07       	cpc	r26, r18
 1ce:	b1 05       	cpc	r27, r1
 1d0:	79 f7       	brne	.-34     	; 0x1b0 <GetPulseWidth+0x54>
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;	//Indicates time out
 1d2:	8e ef       	ldi	r24, 0xFE	; 254
 1d4:	9f ef       	ldi	r25, 0xFF	; 255
 1d6:	08 95       	ret
		}
		else
		break;
	}

	if(i==600000)
 1d8:	80 3c       	cpi	r24, 0xC0	; 192
 1da:	97 42       	sbci	r25, 0x27	; 39
 1dc:	a9 40       	sbci	r26, 0x09	; 9
 1de:	b1 05       	cpc	r27, r1
 1e0:	99 f0       	breq	.+38     	; 0x208 <GetPulseWidth+0xac>
	return US_NO_OBSTACLE;	//Indicates time out

	//Falling edge found

	result=TCNT1;          // microcontroller stores the the value of the counted pulse time in the TCNT1 register. So, we're returning this value to the
 1e2:	8c b5       	in	r24, 0x2c	; 44
 1e4:	9d b5       	in	r25, 0x2d	; 45
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
	// main function for utilizing it later

	//Stop Timer
	TCCR1B=0x00;
 1ea:	1e bc       	out	0x2e, r1	; 46

	if(result > 60000)
 1ec:	81 36       	cpi	r24, 0x61	; 97
 1ee:	2a ee       	ldi	r18, 0xEA	; 234
 1f0:	92 07       	cpc	r25, r18
 1f2:	a1 05       	cpc	r26, r1
 1f4:	b1 05       	cpc	r27, r1
 1f6:	58 f4       	brcc	.+22     	; 0x20e <GetPulseWidth+0xb2>
	return US_NO_OBSTACLE;	//No obstacle
	else
	return (result>>1);
 1f8:	b6 95       	lsr	r27
 1fa:	a7 95       	ror	r26
 1fc:	97 95       	ror	r25
 1fe:	87 95       	ror	r24
 200:	08 95       	ret
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
	return US_ERROR;	//Indicates time out
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	9f ef       	ldi	r25, 0xFF	; 255
 206:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;	//Indicates time out
 208:	8e ef       	ldi	r24, 0xFE	; 254
 20a:	9f ef       	ldi	r25, 0xFF	; 255
 20c:	08 95       	ret

	//Stop Timer
	TCCR1B=0x00;

	if(result > 60000)
	return US_NO_OBSTACLE;	//No obstacle
 20e:	8e ef       	ldi	r24, 0xFE	; 254
 210:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
 212:	08 95       	ret

00000214 <main>:
//}
//}
//


int main(void) {
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	00 d0       	rcall	.+0      	; 0x21a <main+0x6>
 21a:	00 d0       	rcall	.+0      	; 0x21c <main+0x8>
 21c:	cd b7       	in	r28, 0x3d	; 61
	uint16_t r; // Variable to store measured distance
	char numberString[4];
	// Initialize LCD and Ultrasonic sensor
	LCD_Init();
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	55 df       	rcall	.-342    	; 0xcc <LCD_Init>
 222:	94 df       	rcall	.-216    	; 0x14c <HCSR04Init>
 224:	8e df       	rcall	.-228    	; 0x142 <LCD_Clear>
 226:	80 e6       	ldi	r24, 0x60	; 96
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	64 df       	rcall	.-312    	; 0xf4 <LCD_String>
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	81 ee       	ldi	r24, 0xE1	; 225
 230:	94 e0       	ldi	r25, 0x04	; 4
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x1e>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x28>
 23c:	00 00       	nop
 23e:	81 df       	rcall	.-254    	; 0x142 <LCD_Clear>
 240:	87 df       	rcall	.-242    	; 0x150 <HCSR04Trigger>
 242:	8c df       	rcall	.-232    	; 0x15c <GetPulseWidth>
 244:	8f 3f       	cpi	r24, 0xFF	; 255
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	92 07       	cpc	r25, r18
 24a:	31 f4       	brne	.+12     	; 0x258 <main+0x44>
 24c:	40 e7       	ldi	r20, 0x70	; 112
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	5d df       	rcall	.-326    	; 0x110 <LCD_String_xy>
 256:	45 c0       	rjmp	.+138    	; 0x2e2 <main+0xce>
 258:	bc 01       	movw	r22, r24
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	7c d0       	rcall	.+248    	; 0x358 <__floatunsisf>
 260:	26 e9       	ldi	r18, 0x96	; 150
 262:	33 e4       	ldi	r19, 0x43	; 67
 264:	4b e0       	ldi	r20, 0x0B	; 11
 266:	5d e3       	ldi	r21, 0x3D	; 61
 268:	05 d1       	rcall	.+522    	; 0x474 <__mulsf3>
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	5f e3       	ldi	r21, 0x3F	; 63
 272:	00 d1       	rcall	.+512    	; 0x474 <__mulsf3>
 274:	40 d0       	rcall	.+128    	; 0x2f6 <__fixsfsi>
 276:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <distance+0x1>
 27a:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <distance>
 27e:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <__data_end>
 282:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <__data_end+0x1>
 286:	26 17       	cp	r18, r22
 288:	37 07       	cpc	r19, r23
 28a:	09 f0       	breq	.+2      	; 0x28e <main+0x7a>
 28c:	5a df       	rcall	.-332    	; 0x142 <LCD_Clear>
 28e:	47 e7       	ldi	r20, 0x77	; 119
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	3c df       	rcall	.-392    	; 0x110 <LCD_String_xy>
 298:	4a e0       	ldi	r20, 0x0A	; 10
 29a:	be 01       	movw	r22, r28
 29c:	6f 5f       	subi	r22, 0xFF	; 255
 29e:	7f 4f       	sbci	r23, 0xFF	; 255
 2a0:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <distance>
 2a4:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <distance+0x1>
 2a8:	48 d1       	rcall	.+656    	; 0x53a <__itoa_ncheck>
 2aa:	ae 01       	movw	r20, r28
 2ac:	4f 5f       	subi	r20, 0xFF	; 255
 2ae:	5f 4f       	sbci	r21, 0xFF	; 255
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	8c e0       	ldi	r24, 0x0C	; 12
 2b4:	2d df       	rcall	.-422    	; 0x110 <LCD_String_xy>
 2b6:	43 e8       	ldi	r20, 0x83	; 131
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	8e e0       	ldi	r24, 0x0E	; 14
 2be:	28 df       	rcall	.-432    	; 0x110 <LCD_String_xy>
 2c0:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <distance>
 2c4:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <distance+0x1>
 2c8:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <__data_end+0x1>
 2cc:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	96 e7       	ldi	r25, 0x76	; 118
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	81 50       	subi	r24, 0x01	; 1
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	20 40       	sbci	r18, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0xc2>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0xcc>
 2e0:	00 00       	nop
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	99 e6       	ldi	r25, 0x69	; 105
 2e6:	28 e1       	ldi	r18, 0x18	; 24
 2e8:	81 50       	subi	r24, 0x01	; 1
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	20 40       	sbci	r18, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0xd4>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0xde>
 2f2:	00 00       	nop
 2f4:	a5 cf       	rjmp	.-182    	; 0x240 <main+0x2c>

000002f6 <__fixsfsi>:
 2f6:	04 d0       	rcall	.+8      	; 0x300 <__fixunssfsi>
 2f8:	68 94       	set
 2fa:	b1 11       	cpse	r27, r1
 2fc:	b5 c0       	rjmp	.+362    	; 0x468 <__fp_szero>
 2fe:	08 95       	ret

00000300 <__fixunssfsi>:
 300:	98 d0       	rcall	.+304    	; 0x432 <__fp_splitA>
 302:	88 f0       	brcs	.+34     	; 0x326 <__fixunssfsi+0x26>
 304:	9f 57       	subi	r25, 0x7F	; 127
 306:	90 f0       	brcs	.+36     	; 0x32c <__fixunssfsi+0x2c>
 308:	b9 2f       	mov	r27, r25
 30a:	99 27       	eor	r25, r25
 30c:	b7 51       	subi	r27, 0x17	; 23
 30e:	a0 f0       	brcs	.+40     	; 0x338 <__fixunssfsi+0x38>
 310:	d1 f0       	breq	.+52     	; 0x346 <__fixunssfsi+0x46>
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	88 1f       	adc	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	1a f0       	brmi	.+6      	; 0x322 <__fixunssfsi+0x22>
 31c:	ba 95       	dec	r27
 31e:	c9 f7       	brne	.-14     	; 0x312 <__fixunssfsi+0x12>
 320:	12 c0       	rjmp	.+36     	; 0x346 <__fixunssfsi+0x46>
 322:	b1 30       	cpi	r27, 0x01	; 1
 324:	81 f0       	breq	.+32     	; 0x346 <__fixunssfsi+0x46>
 326:	9f d0       	rcall	.+318    	; 0x466 <__fp_zero>
 328:	b1 e0       	ldi	r27, 0x01	; 1
 32a:	08 95       	ret
 32c:	9c c0       	rjmp	.+312    	; 0x466 <__fp_zero>
 32e:	67 2f       	mov	r22, r23
 330:	78 2f       	mov	r23, r24
 332:	88 27       	eor	r24, r24
 334:	b8 5f       	subi	r27, 0xF8	; 248
 336:	39 f0       	breq	.+14     	; 0x346 <__fixunssfsi+0x46>
 338:	b9 3f       	cpi	r27, 0xF9	; 249
 33a:	cc f3       	brlt	.-14     	; 0x32e <__fixunssfsi+0x2e>
 33c:	86 95       	lsr	r24
 33e:	77 95       	ror	r23
 340:	67 95       	ror	r22
 342:	b3 95       	inc	r27
 344:	d9 f7       	brne	.-10     	; 0x33c <__fixunssfsi+0x3c>
 346:	3e f4       	brtc	.+14     	; 0x356 <__fixunssfsi+0x56>
 348:	90 95       	com	r25
 34a:	80 95       	com	r24
 34c:	70 95       	com	r23
 34e:	61 95       	neg	r22
 350:	7f 4f       	sbci	r23, 0xFF	; 255
 352:	8f 4f       	sbci	r24, 0xFF	; 255
 354:	9f 4f       	sbci	r25, 0xFF	; 255
 356:	08 95       	ret

00000358 <__floatunsisf>:
 358:	e8 94       	clt
 35a:	09 c0       	rjmp	.+18     	; 0x36e <__floatsisf+0x12>

0000035c <__floatsisf>:
 35c:	97 fb       	bst	r25, 7
 35e:	3e f4       	brtc	.+14     	; 0x36e <__floatsisf+0x12>
 360:	90 95       	com	r25
 362:	80 95       	com	r24
 364:	70 95       	com	r23
 366:	61 95       	neg	r22
 368:	7f 4f       	sbci	r23, 0xFF	; 255
 36a:	8f 4f       	sbci	r24, 0xFF	; 255
 36c:	9f 4f       	sbci	r25, 0xFF	; 255
 36e:	99 23       	and	r25, r25
 370:	a9 f0       	breq	.+42     	; 0x39c <__floatsisf+0x40>
 372:	f9 2f       	mov	r31, r25
 374:	96 e9       	ldi	r25, 0x96	; 150
 376:	bb 27       	eor	r27, r27
 378:	93 95       	inc	r25
 37a:	f6 95       	lsr	r31
 37c:	87 95       	ror	r24
 37e:	77 95       	ror	r23
 380:	67 95       	ror	r22
 382:	b7 95       	ror	r27
 384:	f1 11       	cpse	r31, r1
 386:	f8 cf       	rjmp	.-16     	; 0x378 <__floatsisf+0x1c>
 388:	fa f4       	brpl	.+62     	; 0x3c8 <__floatsisf+0x6c>
 38a:	bb 0f       	add	r27, r27
 38c:	11 f4       	brne	.+4      	; 0x392 <__floatsisf+0x36>
 38e:	60 ff       	sbrs	r22, 0
 390:	1b c0       	rjmp	.+54     	; 0x3c8 <__floatsisf+0x6c>
 392:	6f 5f       	subi	r22, 0xFF	; 255
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	8f 4f       	sbci	r24, 0xFF	; 255
 398:	9f 4f       	sbci	r25, 0xFF	; 255
 39a:	16 c0       	rjmp	.+44     	; 0x3c8 <__floatsisf+0x6c>
 39c:	88 23       	and	r24, r24
 39e:	11 f0       	breq	.+4      	; 0x3a4 <__floatsisf+0x48>
 3a0:	96 e9       	ldi	r25, 0x96	; 150
 3a2:	11 c0       	rjmp	.+34     	; 0x3c6 <__floatsisf+0x6a>
 3a4:	77 23       	and	r23, r23
 3a6:	21 f0       	breq	.+8      	; 0x3b0 <__floatsisf+0x54>
 3a8:	9e e8       	ldi	r25, 0x8E	; 142
 3aa:	87 2f       	mov	r24, r23
 3ac:	76 2f       	mov	r23, r22
 3ae:	05 c0       	rjmp	.+10     	; 0x3ba <__floatsisf+0x5e>
 3b0:	66 23       	and	r22, r22
 3b2:	71 f0       	breq	.+28     	; 0x3d0 <__floatsisf+0x74>
 3b4:	96 e8       	ldi	r25, 0x86	; 134
 3b6:	86 2f       	mov	r24, r22
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	2a f0       	brmi	.+10     	; 0x3c8 <__floatsisf+0x6c>
 3be:	9a 95       	dec	r25
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	88 1f       	adc	r24, r24
 3c6:	da f7       	brpl	.-10     	; 0x3be <__floatsisf+0x62>
 3c8:	88 0f       	add	r24, r24
 3ca:	96 95       	lsr	r25
 3cc:	87 95       	ror	r24
 3ce:	97 f9       	bld	r25, 7
 3d0:	08 95       	ret

000003d2 <__fp_inf>:
 3d2:	97 f9       	bld	r25, 7
 3d4:	9f 67       	ori	r25, 0x7F	; 127
 3d6:	80 e8       	ldi	r24, 0x80	; 128
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	08 95       	ret

000003de <__fp_nan>:
 3de:	9f ef       	ldi	r25, 0xFF	; 255
 3e0:	80 ec       	ldi	r24, 0xC0	; 192
 3e2:	08 95       	ret

000003e4 <__fp_pscA>:
 3e4:	00 24       	eor	r0, r0
 3e6:	0a 94       	dec	r0
 3e8:	16 16       	cp	r1, r22
 3ea:	17 06       	cpc	r1, r23
 3ec:	18 06       	cpc	r1, r24
 3ee:	09 06       	cpc	r0, r25
 3f0:	08 95       	ret

000003f2 <__fp_pscB>:
 3f2:	00 24       	eor	r0, r0
 3f4:	0a 94       	dec	r0
 3f6:	12 16       	cp	r1, r18
 3f8:	13 06       	cpc	r1, r19
 3fa:	14 06       	cpc	r1, r20
 3fc:	05 06       	cpc	r0, r21
 3fe:	08 95       	ret

00000400 <__fp_round>:
 400:	09 2e       	mov	r0, r25
 402:	03 94       	inc	r0
 404:	00 0c       	add	r0, r0
 406:	11 f4       	brne	.+4      	; 0x40c <__fp_round+0xc>
 408:	88 23       	and	r24, r24
 40a:	52 f0       	brmi	.+20     	; 0x420 <__fp_round+0x20>
 40c:	bb 0f       	add	r27, r27
 40e:	40 f4       	brcc	.+16     	; 0x420 <__fp_round+0x20>
 410:	bf 2b       	or	r27, r31
 412:	11 f4       	brne	.+4      	; 0x418 <__fp_round+0x18>
 414:	60 ff       	sbrs	r22, 0
 416:	04 c0       	rjmp	.+8      	; 0x420 <__fp_round+0x20>
 418:	6f 5f       	subi	r22, 0xFF	; 255
 41a:	7f 4f       	sbci	r23, 0xFF	; 255
 41c:	8f 4f       	sbci	r24, 0xFF	; 255
 41e:	9f 4f       	sbci	r25, 0xFF	; 255
 420:	08 95       	ret

00000422 <__fp_split3>:
 422:	57 fd       	sbrc	r21, 7
 424:	90 58       	subi	r25, 0x80	; 128
 426:	44 0f       	add	r20, r20
 428:	55 1f       	adc	r21, r21
 42a:	59 f0       	breq	.+22     	; 0x442 <__fp_splitA+0x10>
 42c:	5f 3f       	cpi	r21, 0xFF	; 255
 42e:	71 f0       	breq	.+28     	; 0x44c <__fp_splitA+0x1a>
 430:	47 95       	ror	r20

00000432 <__fp_splitA>:
 432:	88 0f       	add	r24, r24
 434:	97 fb       	bst	r25, 7
 436:	99 1f       	adc	r25, r25
 438:	61 f0       	breq	.+24     	; 0x452 <__fp_splitA+0x20>
 43a:	9f 3f       	cpi	r25, 0xFF	; 255
 43c:	79 f0       	breq	.+30     	; 0x45c <__fp_splitA+0x2a>
 43e:	87 95       	ror	r24
 440:	08 95       	ret
 442:	12 16       	cp	r1, r18
 444:	13 06       	cpc	r1, r19
 446:	14 06       	cpc	r1, r20
 448:	55 1f       	adc	r21, r21
 44a:	f2 cf       	rjmp	.-28     	; 0x430 <__fp_split3+0xe>
 44c:	46 95       	lsr	r20
 44e:	f1 df       	rcall	.-30     	; 0x432 <__fp_splitA>
 450:	08 c0       	rjmp	.+16     	; 0x462 <__fp_splitA+0x30>
 452:	16 16       	cp	r1, r22
 454:	17 06       	cpc	r1, r23
 456:	18 06       	cpc	r1, r24
 458:	99 1f       	adc	r25, r25
 45a:	f1 cf       	rjmp	.-30     	; 0x43e <__fp_splitA+0xc>
 45c:	86 95       	lsr	r24
 45e:	71 05       	cpc	r23, r1
 460:	61 05       	cpc	r22, r1
 462:	08 94       	sec
 464:	08 95       	ret

00000466 <__fp_zero>:
 466:	e8 94       	clt

00000468 <__fp_szero>:
 468:	bb 27       	eor	r27, r27
 46a:	66 27       	eor	r22, r22
 46c:	77 27       	eor	r23, r23
 46e:	cb 01       	movw	r24, r22
 470:	97 f9       	bld	r25, 7
 472:	08 95       	ret

00000474 <__mulsf3>:
 474:	0b d0       	rcall	.+22     	; 0x48c <__mulsf3x>
 476:	c4 cf       	rjmp	.-120    	; 0x400 <__fp_round>
 478:	b5 df       	rcall	.-150    	; 0x3e4 <__fp_pscA>
 47a:	28 f0       	brcs	.+10     	; 0x486 <__mulsf3+0x12>
 47c:	ba df       	rcall	.-140    	; 0x3f2 <__fp_pscB>
 47e:	18 f0       	brcs	.+6      	; 0x486 <__mulsf3+0x12>
 480:	95 23       	and	r25, r21
 482:	09 f0       	breq	.+2      	; 0x486 <__mulsf3+0x12>
 484:	a6 cf       	rjmp	.-180    	; 0x3d2 <__fp_inf>
 486:	ab cf       	rjmp	.-170    	; 0x3de <__fp_nan>
 488:	11 24       	eor	r1, r1
 48a:	ee cf       	rjmp	.-36     	; 0x468 <__fp_szero>

0000048c <__mulsf3x>:
 48c:	ca df       	rcall	.-108    	; 0x422 <__fp_split3>
 48e:	a0 f3       	brcs	.-24     	; 0x478 <__mulsf3+0x4>

00000490 <__mulsf3_pse>:
 490:	95 9f       	mul	r25, r21
 492:	d1 f3       	breq	.-12     	; 0x488 <__mulsf3+0x14>
 494:	95 0f       	add	r25, r21
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	55 1f       	adc	r21, r21
 49a:	62 9f       	mul	r22, r18
 49c:	f0 01       	movw	r30, r0
 49e:	72 9f       	mul	r23, r18
 4a0:	bb 27       	eor	r27, r27
 4a2:	f0 0d       	add	r31, r0
 4a4:	b1 1d       	adc	r27, r1
 4a6:	63 9f       	mul	r22, r19
 4a8:	aa 27       	eor	r26, r26
 4aa:	f0 0d       	add	r31, r0
 4ac:	b1 1d       	adc	r27, r1
 4ae:	aa 1f       	adc	r26, r26
 4b0:	64 9f       	mul	r22, r20
 4b2:	66 27       	eor	r22, r22
 4b4:	b0 0d       	add	r27, r0
 4b6:	a1 1d       	adc	r26, r1
 4b8:	66 1f       	adc	r22, r22
 4ba:	82 9f       	mul	r24, r18
 4bc:	22 27       	eor	r18, r18
 4be:	b0 0d       	add	r27, r0
 4c0:	a1 1d       	adc	r26, r1
 4c2:	62 1f       	adc	r22, r18
 4c4:	73 9f       	mul	r23, r19
 4c6:	b0 0d       	add	r27, r0
 4c8:	a1 1d       	adc	r26, r1
 4ca:	62 1f       	adc	r22, r18
 4cc:	83 9f       	mul	r24, r19
 4ce:	a0 0d       	add	r26, r0
 4d0:	61 1d       	adc	r22, r1
 4d2:	22 1f       	adc	r18, r18
 4d4:	74 9f       	mul	r23, r20
 4d6:	33 27       	eor	r19, r19
 4d8:	a0 0d       	add	r26, r0
 4da:	61 1d       	adc	r22, r1
 4dc:	23 1f       	adc	r18, r19
 4de:	84 9f       	mul	r24, r20
 4e0:	60 0d       	add	r22, r0
 4e2:	21 1d       	adc	r18, r1
 4e4:	82 2f       	mov	r24, r18
 4e6:	76 2f       	mov	r23, r22
 4e8:	6a 2f       	mov	r22, r26
 4ea:	11 24       	eor	r1, r1
 4ec:	9f 57       	subi	r25, 0x7F	; 127
 4ee:	50 40       	sbci	r21, 0x00	; 0
 4f0:	8a f0       	brmi	.+34     	; 0x514 <__mulsf3_pse+0x84>
 4f2:	e1 f0       	breq	.+56     	; 0x52c <__mulsf3_pse+0x9c>
 4f4:	88 23       	and	r24, r24
 4f6:	4a f0       	brmi	.+18     	; 0x50a <__mulsf3_pse+0x7a>
 4f8:	ee 0f       	add	r30, r30
 4fa:	ff 1f       	adc	r31, r31
 4fc:	bb 1f       	adc	r27, r27
 4fe:	66 1f       	adc	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	88 1f       	adc	r24, r24
 504:	91 50       	subi	r25, 0x01	; 1
 506:	50 40       	sbci	r21, 0x00	; 0
 508:	a9 f7       	brne	.-22     	; 0x4f4 <__mulsf3_pse+0x64>
 50a:	9e 3f       	cpi	r25, 0xFE	; 254
 50c:	51 05       	cpc	r21, r1
 50e:	70 f0       	brcs	.+28     	; 0x52c <__mulsf3_pse+0x9c>
 510:	60 cf       	rjmp	.-320    	; 0x3d2 <__fp_inf>
 512:	aa cf       	rjmp	.-172    	; 0x468 <__fp_szero>
 514:	5f 3f       	cpi	r21, 0xFF	; 255
 516:	ec f3       	brlt	.-6      	; 0x512 <__mulsf3_pse+0x82>
 518:	98 3e       	cpi	r25, 0xE8	; 232
 51a:	dc f3       	brlt	.-10     	; 0x512 <__mulsf3_pse+0x82>
 51c:	86 95       	lsr	r24
 51e:	77 95       	ror	r23
 520:	67 95       	ror	r22
 522:	b7 95       	ror	r27
 524:	f7 95       	ror	r31
 526:	e7 95       	ror	r30
 528:	9f 5f       	subi	r25, 0xFF	; 255
 52a:	c1 f7       	brne	.-16     	; 0x51c <__mulsf3_pse+0x8c>
 52c:	fe 2b       	or	r31, r30
 52e:	88 0f       	add	r24, r24
 530:	91 1d       	adc	r25, r1
 532:	96 95       	lsr	r25
 534:	87 95       	ror	r24
 536:	97 f9       	bld	r25, 7
 538:	08 95       	ret

0000053a <__itoa_ncheck>:
 53a:	bb 27       	eor	r27, r27
 53c:	4a 30       	cpi	r20, 0x0A	; 10
 53e:	31 f4       	brne	.+12     	; 0x54c <__itoa_ncheck+0x12>
 540:	99 23       	and	r25, r25
 542:	22 f4       	brpl	.+8      	; 0x54c <__itoa_ncheck+0x12>
 544:	bd e2       	ldi	r27, 0x2D	; 45
 546:	90 95       	com	r25
 548:	81 95       	neg	r24
 54a:	9f 4f       	sbci	r25, 0xFF	; 255
 54c:	01 c0       	rjmp	.+2      	; 0x550 <__utoa_common>

0000054e <__utoa_ncheck>:
 54e:	bb 27       	eor	r27, r27

00000550 <__utoa_common>:
 550:	fb 01       	movw	r30, r22
 552:	55 27       	eor	r21, r21
 554:	aa 27       	eor	r26, r26
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	aa 1f       	adc	r26, r26
 55c:	a4 17       	cp	r26, r20
 55e:	10 f0       	brcs	.+4      	; 0x564 <__utoa_common+0x14>
 560:	a4 1b       	sub	r26, r20
 562:	83 95       	inc	r24
 564:	50 51       	subi	r21, 0x10	; 16
 566:	b9 f7       	brne	.-18     	; 0x556 <__utoa_common+0x6>
 568:	a0 5d       	subi	r26, 0xD0	; 208
 56a:	aa 33       	cpi	r26, 0x3A	; 58
 56c:	08 f0       	brcs	.+2      	; 0x570 <__utoa_common+0x20>
 56e:	a9 5d       	subi	r26, 0xD9	; 217
 570:	a1 93       	st	Z+, r26
 572:	00 97       	sbiw	r24, 0x00	; 0
 574:	79 f7       	brne	.-34     	; 0x554 <__utoa_common+0x4>
 576:	b1 11       	cpse	r27, r1
 578:	b1 93       	st	Z+, r27
 57a:	11 92       	st	Z+, r1
 57c:	cb 01       	movw	r24, r22
 57e:	00 c0       	rjmp	.+0      	; 0x580 <strrev>

00000580 <strrev>:
 580:	dc 01       	movw	r26, r24
 582:	fc 01       	movw	r30, r24
 584:	67 2f       	mov	r22, r23
 586:	71 91       	ld	r23, Z+
 588:	77 23       	and	r23, r23
 58a:	e1 f7       	brne	.-8      	; 0x584 <strrev+0x4>
 58c:	32 97       	sbiw	r30, 0x02	; 2
 58e:	04 c0       	rjmp	.+8      	; 0x598 <strrev+0x18>
 590:	7c 91       	ld	r23, X
 592:	6d 93       	st	X+, r22
 594:	70 83       	st	Z, r23
 596:	62 91       	ld	r22, -Z
 598:	ae 17       	cp	r26, r30
 59a:	bf 07       	cpc	r27, r31
 59c:	c8 f3       	brcs	.-14     	; 0x590 <strrev+0x10>
 59e:	08 95       	ret

000005a0 <_exit>:
 5a0:	f8 94       	cli

000005a2 <__stop_program>:
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <__stop_program>
